<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAABAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAAQAAAAJMAAACkAAAAowAAAKMAAACjAAAAowAAAKMAAACjAAAAowAA
        AKMAAACjAAAAowAAAKMAAACjAAAAowAAAKMAAACjAAAAowAAAKMAAACjAAAAowAAAKMAAACjAAAAowAA
        AKQAAACTAAAAQAAAAAIAAAAAAAAAAAAAAEAAAADmAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAADlAAAAQAAAAAAAAAAAAAAAkgAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACSAAAAAAAAAAIAAACkAAAA/wAAAP8AAAD/AAAA/gAA
        AP0AAAD9AAAA/QAAAP0AAAD9AAAA/QAAAP0AAAD9AAAA/QAAAP0AAAD9AAAA/QAAAP0AAAD9AAAA/QAA
        AP0AAAD9AAAA/QAAAP0AAAD9AAAA/gAAAP8AAAD/AAAA/wAAAKQAAAACAAAAAgAAAKMAAAD/AAAA/wAA
        AP4AAACVAAAAWAAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAA
        AFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFgAAACVAAAA/gAAAP8AAAD/AAAAowAAAAIAAAACAAAAowAA
        AP8AAAD/AAAA/QAAAFoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFoAAAD9AAAA/wAAAP8AAACjAAAAAgAA
        AAIAAACjAAAA/wAAAP8AAAD9AAAAWgAAAAAAAAAEAAAAGwAAAB8AAAAfAAAAHwAAAB8AAAAPAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWgAAAP0AAAD/AAAA/wAA
        AKMAAAACAAAAAgAAAKMAAAD/AAAA/wAAAP0AAABaAAAAAAAAABsAAADFAAAA4gAAAOAAAADgAAAA4wAA
        AJ4AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABaAAAA/QAA
        AP8AAAD/AAAAowAAAAIAAAACAAAAowAAAP8AAAD/AAAA/QAAAFoAAAAAAAAAHwAAAOAAAAD/AAAA/wAA
        AP8AAAD/AAAAhAAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AFoAAAD9AAAA/wAAAP8AAACjAAAAAgAAAAIAAACjAAAA/wAAAP8AAAD9AAAAWgAAAAAAAAAfAAAA4AAA
        AP8AAAD/AAAA/wAAAL8AAAAYAAAACwAAAG0AAAAiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAWgAAAP0AAAD/AAAA/wAAAKMAAAACAAAAAgAAAKMAAAD/AAAA/wAAAP0AAABaAAAAAAAA
        AB8AAADgAAAA/wAAAP8AAADRAAAAMgAAAAAAAABrAAAA+AAAALcAAAAfAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABaAAAA/QAAAP8AAAD/AAAAowAAAAIAAAACAAAAowAAAP8AAAD/AAAA/QAA
        AFoAAAAAAAAAHwAAAOAAAAD/AAAAwAAAADIAAAAAAAAATQAAAOgAAAD/AAAA/wAAALYAAAAfAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFoAAAD9AAAA/wAAAP8AAACjAAAAAgAAAAIAAACjAAAA/wAA
        AP8AAAD9AAAAWgAAAAAAAAAPAAAAngAAAIQAAAAYAAAAAAAAAE4AAADhAAAA/wAAAP8AAAD/AAAA/wAA
        ALYAAAAfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWwAAAP4AAAD/AAAA/wAAAKMAAAACAAAAAgAA
        AKMAAAD/AAAA/wAAAP0AAABaAAAAAAAAAAAAAAAJAAAAAgAAAA0AAABuAAAA6QAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAALYAAAAfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABLAAAA9QAAAP8AAAD/AAAAowAA
        AAIAAAACAAAAowAAAP8AAAD/AAAA/QAAAFoAAAAAAAAAAAAAAAAAAAAAAAAAcgAAAPkAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAALYAAAAfAAAAAAAAAAAAAAAAAAAAAAAAAAgAAACCAAAA+AAA
        AP8AAACjAAAAAgAAAAIAAACjAAAA/wAAAP8AAAD9AAAAWgAAAAAAAAAAAAAAAAAAAAAAAAAiAAAAtwAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAALYAAAAfAAAAAAAAAAAAAAAAAAAAAAAA
        AAkAAACEAAAA/QAAAKQAAAACAAAAAgAAAKMAAAD/AAAA/wAAAP0AAABaAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAfAAAAtwAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAALYAAAAfAAAAAAAA
        AAAAAAAAAAAAAAAAAAkAAACKAAAAngAAAAIAAAACAAAAowAAAP8AAAD/AAAA/QAAAFoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAfAAAAtwAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        ALYAAAAfAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAA6AAAAAwAAAAIAAACjAAAA/wAAAP8AAAD9AAAAWgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfAAAAtwAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAALYAAAAfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAKMAAAD/AAAA/wAA
        AP0AAABaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfAAAAtwAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAALYAAAAfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAowAA
        AP8AAAD/AAAA/QAAAFoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfAAAAtwAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAALYAAAAZAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAACjAAAA/wAAAP8AAAD9AAAAWgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAfAAAAtwAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA3QAAACYAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAKMAAAD/AAAA/wAAAP0AAABaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAfAAAAtwAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPoAAABxAAAAAAAA
        ACcAAAAeAAAAAAAAAAAAAAACAAAAowAAAP8AAAD/AAAA/QAAAFoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfAAAAtwAAAP8AAAD/AAAA/wAAAP8AAAD+AAAAmwAA
        AAsAAAAUAAAAugAAALkAAAAfAAAAAAAAAAIAAACjAAAA/wAAAP8AAAD9AAAAWgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfAAAAtwAAAP8AAAD/AAAA+gAA
        AJsAAAATAAAACAAAAJAAAAD9AAAA/wAAAIwAAAAAAAAAAgAAAKMAAAD/AAAA/wAAAP4AAACVAAAAVwAA
        AFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFsAAABLAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAfAAAAtgAA
        AN8AAABwAAAADAAAAAkAAACBAAAA+AAAAP8AAAD/AAAAigAAAAAAAAACAAAApAAAAP8AAAD/AAAA/wAA
        AP4AAAD9AAAA/QAAAP0AAAD9AAAA/QAAAP0AAAD9AAAA/gAAAPcAAACBAAAACQAAAAAAAAAAAAAAAAAA
        AAAAAAAaAAAAJgAAAAEAAAAWAAAAkwAAAPgAAAD/AAAA/wAAAPsAAABYAAAAAAAAAAAAAACSAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPgAAACCAAAACQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAKQAAAL4AAAD9AAAA/wAAAP8AAAD/AAAAzAAAABoAAAAAAAAAAAAA
        AEAAAADlAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        APkAAACGAAAACwAAAAAAAAAAAAAAAAAAAAAAAAAeAAAAuQAAAP8AAAD/AAAA/AAAAM0AAABDAAAAAAAA
        AAAAAAAAAAAAAgAAAEAAAACTAAAApAAAAKMAAACjAAAAowAAAKMAAACjAAAAowAAAKMAAACjAAAAowAA
        AKMAAACjAAAApQAAAJ0AAAA2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAjQAAAIwAAABZAAAAGgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAwAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA4AAAB4AAAAGAAAABgAAAAQAAAAAAAAAAA///wAID/8ACAf/AAgD/wAIA
        f8ACBD/AAggfwAIQD8ADAAfAA8ADwAPAAeAD4ADwA/AAeAP4AD8D/AAfA/4ADwP/AA8D/4ATA//AAQP/
        4AEAAPABAAB4AYAAPgGAAB4DgAAfB+AAH78=
</value>
  </data>
</root>